import React, { lazy, Suspense } from 'react'
import { Routes, Route, Navigate } from 'react-router-dom'
import { useAuth } from './hooks/useAuth'
import LoadingScreen from './components/LoadingScreen'

/**
 * App.jsx - O C√©rebro do Sistema! üß†
 * 
 * Este arquivo √© como um GPS que:
 * 1. Define todas as rotas (caminhos) do site
 * 2. Protege p√°ginas que precisam de login
 * 3. Carrega as p√°ginas s√≥ quando necess√°rio (lazy loading)
 * 
 * √â tipo o mapa do tesouro do nosso sistema!
 */

// Carregamento "pregui√ßoso" - s√≥ carrega a p√°gina quando precisar
// Isso deixa o site MUITO mais r√°pido! ‚ö°
const Home = lazy(() => import('./pages/Home'))
const Login = lazy(() => import('./pages/Login'))
const Register = lazy(() => import('./pages/Register'))
const Dashboard = lazy(() => import('./pages/Dashboard'))
const Admin = lazy(() => import('./pages/Admin'))
const Ranking = lazy(() => import('./pages/Ranking'))
const Category = lazy(() => import('./pages/Category'))
const State = lazy(() => import('./pages/State'))

// P√°ginas extras mencionadas no PDF
const Novidades = lazy(() => import('./pages/Novidades'))
const Populares = lazy(() => import('./pages/Populares'))
const Premium = lazy(() => import('./pages/Premium'))

/**
 * Componente que protege rotas privadas
 * 
 * √â como um seguran√ßa na porta - s√≥ deixa passar
 * quem tem autoriza√ß√£o (est√° logado) üîí
 */
const ProtectedRoute = ({ children, requireAdmin = false }) => {
  const { user, isLoading } = useAuth()

  // Enquanto verifica se est√° logado
  if (isLoading) {
    return <LoadingScreen message="Verificando acesso..." />
  }

  // Se n√£o est√° logado, manda pro login
  if (!user) {
    return <Navigate to="/login" replace />
  }

  // Se precisa ser admin mas n√£o √©
  if (requireAdmin && user.role !== 'admin') {
    return <Navigate to="/dashboard" replace />
  }

  // Se o usu√°rio est√° pendente, mostra aviso
  if (user.status === 'pending' && !requireAdmin) {
    return (
      <div className="pending-approval">
        <div className="pending-content">
          <h2>Conta Pendente de Aprova√ß√£o ‚è≥</h2>
          <p>
            Sua conta foi criada com sucesso e est√° aguardando aprova√ß√£o 
            do administrador. Voc√™ receber√° um email quando for liberada!
          </p>
          <button onClick={() => window.location.href = '/login'}>
            Voltar ao Login
          </button>
        </div>
      </div>
    )
  }

  // Tudo certo, pode passar!
  return children
}

/**
 * Componente principal do App
 * 
 * Define todas as rotas e regras de navega√ß√£o
 * √â o cora√ß√£o do sistema de navega√ß√£o! ‚ù§Ô∏è
 */
function App() {
  const { user } = useAuth()

  return (
    <div className="app">
      {/* Suspense mostra loading enquanto carrega as p√°ginas */}
      <Suspense fallback={<LoadingScreen message="Carregando p√°gina..." />}>
        <Routes>
          {/* === ROTAS P√öBLICAS === */}
          
          {/* P√°gina inicial - com verifica√ß√£o de idade */}
          <Route path="/" element={<Home />} />
          
          {/* Login e Registro - com c√≥digo de acesso */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          
          {/* P√°ginas de navega√ß√£o do header */}
          <Route path="/novidades" element={<Novidades />} />
          <Route path="/populares" element={<Populares />} />
          
          {/* P√°ginas din√¢micas por categoria e estado */}
          <Route path="/category/:categoryId" element={<Category />} />
          <Route path="/state/:stateCode" element={<State />} />
          
          {/* === ROTAS PROTEGIDAS (PRECISA LOGIN) === */}
          
          {/* Dashboard do usu√°rio */}
          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            }
          />
          
          {/* Ranking - usu√°rios logados podem ver */}
          <Route
            path="/ranking"
            element={
              <ProtectedRoute>
                <Ranking />
              </ProtectedRoute>
            }
          />
          
          {/* Premium - s√≥ para usu√°rios logados */}
          <Route
            path="/premium"
            element={
              <ProtectedRoute>
                <Premium />
              </ProtectedRoute>
            }
          />
          
          {/* === ROTAS ADMINISTRATIVAS === */}
          
          {/* Painel do Admin - s√≥ admin pode acessar */}
          <Route
            path="/admin"
            element={
              <ProtectedRoute requireAdmin={true}>
                <Admin />
              </ProtectedRoute>
            }
          />
          
          {/* Rota coringa - qualquer URL n√£o encontrada volta pra home */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </Suspense>
      
      {/* Estilos para p√°gina de aprova√ß√£o pendente */}
      <style jsx>{`
        .pending-approval {
          min-height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
          background: var(--color-background);
          padding: 2rem;
        }
        
        .pending-content {
          max-width: 500px;
          background: var(--color-surface);
          padding: 3rem;
          border-radius: 16px;
          text-align: center;
          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        }
        
        .pending-content h2 {
          font-size: 2rem;
          color: var(--color-text-primary);
          margin-bottom: 1rem;
        }
        
        .pending-content p {
          color: var(--color-text-secondary);
          line-height: 1.6;
          margin-bottom: 2rem;
        }
        
        .pending-content button {
          background: var(--color-primary);
          color: white;
          border: none;
          padding: 0.875rem 2rem;
          border-radius: 8px;
          font-size: 1rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        
        .pending-content button:hover {
          background: var(--color-primary-dark);
          transform: translateY(-2px);
        }
      `}</style>
    </div>
  )
}

export default App
